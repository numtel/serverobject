{"version":3,"file":"/packages/local-test:serverobject.js","sources":["local-test:serverobject/serverobject-tests.js"],"names":[],"mappings":";;;;;;;;AAAA,oB;AACA,mD;AACA,yB;AACA,gC;AACA,I;AACA,wD;AACA,sC;AACA,kD;AACA,M;AACA,kC;AACA,kD;AACA,I;AACA,iF;AACA,oB;AACA,oC;AACA,mC;AACA,M;AACA,0B;AACA,8B;AACA,mB;AACA,kD;AACA,Q;AACA,Y;AACA,0B;AACA,+B;AACA,0B;AACA,yD;AACA,Q;AACA,Y;AACA,I;;AAEA,gD;AACA,sB;AACA,gB;AACA,mB;AACA,wB;AACA,mC;AACA,O;AACA,K;AACA,K;;AAEA,E;;AAEA,6D;AACA,2B;AACA,qB;AACA,+D;AACA,gB;AACA,oB;AACA,Q;AACA,gC;AACA,Q;AACA,G;AACA,G;;AAEA,sE;AACA,2B;AACA,iB;AACA,8B;AACA,0D;AACA,8C;AACA,gB;AACA,oB;AACA,Q;AACA,wB;AACA,yD;AACA,M;AACA,yD;AACA,gB;AACA,oB;AACA,Q;AACA,mD;AACA,mD;AACA,2B;AACA,mC;AACA,O;AACA,kD;AACA,G;AACA,G;;AAEA,6D;AACA,2B;AACA,iB;AACA,sB;AACA,8C;AACA,gB;AACA,oB;AACA,Q;AACA,wB;AACA,yD;AACA,M;AACA,yD;AACA,iC;AACA,+C;AACA,4D;AACA,oC;AACA,O;AACA,kD;AACA,G;AACA,G;;AAEA,8E;AACA,2B;AACA,iB;AACA,gC;AACA,8C;AACA,gB;AACA,oB;AACA,Q;AACA,wB;AACA,2E;AACA,sF;AACA,M;AACA,kC;AACA,sD;AACA,gB;AACA,oB;AACA,Q;AACA,+B;AACA,mD;AACA,4C;AACA,8C;AACA,2B;AACA,mC;AACA,M;AACA,yD;AACA,gB;AACA,oB;AACA,Q;AACA,0C;AACA,mD;AACA,4C;AACA,6C;AACA,2B;AACA,mC;AACA,O;AACA,kD;AACA,G;AACA,G;;AAEA,uD;AACA,2B;AACA,iB;AACA,iC;AACA,8C;AACA,gB;AACA,oB;AACA,Q;AACA,wB;AACA,+E;AACA,M;AACA,sD;AACA,iC;AACA,+C;AACA,6C;AACA,oC;AACA,O;AACA,+C;AACA,+C;AACA,M;AACA,kD;AACA,G;AACA,G","sourcesContent":["if(Meteor.isServer){\n  // Create mockup class for use on the server only\n  MyClass = function(id){\n    this.id = id || Random.id();\n  };\n  MyClass.prototype.reverseString = function(something){\n    if(typeof something !== 'string'){\n      throw new Error('Argument must be string!');\n    };\n    this.lastReversed = something;\n    return something.split('').reverse().join('');\n  };\n  MyClass.prototype.destabilize = function(something, callback, anotherCallback){\n    var that = this;\n    if(something === 'createError'){\n      throw new Error('Aaaaaack!');\n    };\n    setTimeout(function(){\n      that.buffer = something;\n      if(callback){\n        callback.call(that, undefined, something);\n      };\n    }, 100);\n    setTimeout(function(){\n      that.buffer2 = something;\n      if(anotherCallback){\n        anotherCallback.call(that, undefined, something);\n      };\n    }, 200);\n  };\n\n  // Register the mockup class with ServerObject\n  ServerObject.allow({\n    'MyClass': {\n      ref: MyClass,\n      where: function(){\n        return this.id === 'test1';\n      }\n    }\n  });\n\n};\n\ntestAsyncMulti('ServerObject - constructor + value update', [\n  function (test, expect) {\n    var id = 'test1';\n    ServerObject('MyClass', id, expect(function(error, result){\n      if(error){\n        throw error;\n      };\n      test.equal(result.id, id);\n    }));\n  }\n]);\n\ntestAsyncMulti('ServerObject - synchronous function + value update', [\n  function (test, expect) {\n    var instance;\n    var toReverse = 'testers';\n    var expected = toReverse.split('').reverse().join('');\n    var objCallback = function(error, result){\n      if(error){\n        throw error;\n      };\n      instance = result;\n      instance.reverseString(toReverse, reverseCallback);\n    };\n    var reverseCallback = expect(function(error, result){\n      if(error){\n        throw error;\n      };\n      // Instance should be updated with new values\n      test.equal(instance.lastReversed, toReverse);\n      // Check return value\n      test.equal(result, expected);\n    });\n    ServerObject('MyClass', 'test1', objCallback);\n  }\n]);\n\ntestAsyncMulti('ServerObject - synchronous function error', [\n  function (test, expect) {\n    var instance;\n    var toReverse = 1;\n    var objCallback = function(error, result){\n      if(error){\n        throw error;\n      };\n      instance = result;\n      instance.reverseString(toReverse, reverseCallback);\n    };\n    var reverseCallback = expect(function(error, result){\n      // This should have failed!\n      test.equal(error instanceof Error, true);\n      test.equal(error.message, 'Argument must be string!');\n      test.equal(result, undefined);\n    });\n    ServerObject('MyClass', 'test1', objCallback);\n  }\n]);\n\ntestAsyncMulti('ServerObject - async function (2 callbacks) + value update', [\n  function (test, expect) {\n    var instance;\n    var argument = 'believe it';\n    var objCallback = function(error, result){\n      if(error){\n        throw error;\n      };\n      instance = result;\n      // Third parameter is the synchronous callback, not used in this test\n      instance.destabilize(argument, destabilizeCallback, anotherCallback, undefined);\n    };\n    var firstCallbackDone = false;\n    var destabilizeCallback = function(error, result){\n      if(error){\n        throw error;\n      };\n      firstCallbackDone = true;\n      // Instance should be updated with new values\n      test.equal(instance.buffer, argument);\n      test.equal(instance.buffer2, undefined);\n      // Check return value\n      test.equal(result, argument);\n    };\n    var anotherCallback = expect(function(error, result){\n      if(error){\n        throw error;\n      };\n      test.equal(firstCallbackDone, true);\n      // Instance should be updated with new values\n      test.equal(instance.buffer, argument);\n      test.equal(instance.buffer2, argument);\n      // Check return value\n      test.equal(result, argument);\n    });\n    ServerObject('MyClass', 'test1', objCallback);\n  }\n]);\n\ntestAsyncMulti('ServerObject - async function error', [\n  function (test, expect) {\n    var instance;\n    var argument = 'createError';\n    var objCallback = function(error, result){\n      if(error){\n        throw error;\n      };\n      instance = result;\n      instance.destabilize(argument, dontCallback, dontCallback, mainCallback);\n    };\n    var mainCallback = expect(function(error, result){\n      // This should have failed!\n      test.equal(error instanceof Error, true);\n      test.equal(error.message, 'Aaaaaack!');\n      test.equal(result, undefined);\n    });\n    var dontCallback = function(error, result){\n      throw new Error('Should not be called.');\n    };\n    ServerObject('MyClass', 'test1', objCallback);\n  }\n]);\n"]}