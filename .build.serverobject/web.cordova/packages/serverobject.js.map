{"version":3,"file":"/packages/serverobject.js","sources":["serverobject/serverobject.js"],"names":[],"mappings":";;;;;;;;AAAA,4B;AACA,yE;AACA,qD;AACA,oB;AACA,6C;AACA,E;AACA,sC;AACA,8C;AACA,uD;AACA,yD;AACA,yD;AACA,mD;AACA,yE;AACA,iD;AACA,M;AACA,wB;AACA,mE;AACA,G;AACA,G;;AAEA,wB;;AAEA,iC;AACA,kB;;AAEA,8B;AACA,qB;AACA,+B;AACA,qB;AACA,M;AACA,I;;AAEA,oB;AACA,8B;AACA,wC;AACA,iC;AACA,M;AACA,I;;AAEA,sB;AACA,yC;;AAEA,8C;AACA,kC;AACA,yD;AACA,gC;AACA,oE;AACA,+C;AACA,Q;;AAEA,0C;AACA,+B;AACA,2B;AACA,8D;AACA,sC;AACA,mC;AACA,oE;AACA,U;AACA,S;;AAEA,2C;AACA,uC;AACA,2B;AACA,kB;AACA,iC;AACA,oC;AACA,2C;AACA,U;AACA,kB;AACA,0B;AACA,iB;AACA,U;;AAEA,6D;AACA,wC;AACA,2B;AACA,uC;AACA,Y;AACA,W;;AAEA,qC;;AAEA,qB;AACA,6C;AACA,U;AACA,S;AACA,M;AACA,K;AACA,E;;AAEA,iC;AACA,2B;AACA,4E;AACA,I;AACA,qD;AACA,qC;AACA,2C;AACA,I;AACA,0E;AACA,c;AACA,sB;AACA,a;AACA,M;AACA,gC;AACA,qC;;AAEA,kC;AACA,K;AACA,E","sourcesContent":["var global = this || window;\nServerObjectCallbacks = new Meteor.Collection('_ServerObject_callbacks');\nglobal.ServerObjectCallbacks = ServerObjectCallbacks;\nif(Meteor.isClient){\n  Meteor.subscribe('ServerObject_callbacks');\n};\nServerObjectCallbacks.find().observe({\n  changed: function(newCallback, oldCallback){\n    if(readyCallbacks.hasOwnProperty(newCallback._id)){\n      var thisCallback = readyCallbacks[newCallback._id];\n      updateObj.call(thisCallback.instance, newCallback);\n      var argsArray = Object.keys(newCallback.args)\n                        .map(function(k) { return newCallback.args[k] });\n      thisCallback.func.apply(global, argsArray);\n    };\n    // Remove from queue\n    Meteor.call('_ServerObject_callbackReceived', newCallback._id);\n  }\n});\n\nvar readyCallbacks = {};\n\nvar updateObj = function(result){\n  var that = this;\n\n  // Remove old values/methods\n  for(var i in this){\n    if(this.hasOwnProperty(i)){\n      delete this[i];\n    };\n  };\n\n  // Copy new values\n  for(var i in result.values){\n    if(result.values.hasOwnProperty(i)){\n      this[i] = result.values[i];\n    };\n  };\n\n  this.prototype = {};\n  this.prototype.instanceKey = result.id;\n\n  result.methods.forEach(function(methodName){\n    that[methodName] = function(){\n      var callback = Array.prototype.pop.call(arguments);\n      // Check for main callback\n      if(callback !== undefined  && typeof callback !== 'function'){\n        throw new Error('Must pass callback.');\n      };\n\n      // Transcribe any callback arguments\n      var otherCallbacks = [], \n          args = arguments;\n      Array.prototype.forEach.call(args, function(arg, index){\n        if(typeof arg === 'function'){\n          otherCallbacks.push(arg);\n          args[index] = '##CALLBACK:' + (otherCallbacks.length - 1);\n        };\n      });\n\n      Meteor.call('_ServerObject_method', {\n        id: that.prototype.instanceKey,\n        method: methodName,\n        args: args\n      }, function(error, result){\n        if(result && result.errVal){\n          error = new Error(result.errVal);\n        };\n        if(error){\n          callback(error);\n          return;\n        };\n\n        result.callbacks.forEach(function(callbackId, index){\n          readyCallbacks[callbackId] = {\n            instance: that,\n            func: otherCallbacks[index]\n          };\n        });\n\n        updateObj.call(that, result);\n\n        if(callback){\n          callback(undefined, result.retVal);\n        };\n      });\n    };\n  });\n};\n\nglobal.ServerObject = function(){\n  if(arguments.length < 2){\n    throw new Error('Must pass object identifier key string and callback.');\n  };\n  var callback = Array.prototype.pop.call(arguments);\n  if(typeof callback !== 'function'){\n    throw new Error('Must pass callback.');\n  };\n  Meteor.apply('_ServerObject_create', arguments, function(error, result){\n    if(error){\n      callback(error);\n      return;\n    };\n    var instance = new Object();\n    updateObj.call(instance, result);\n\n    callback(undefined, instance);\n  });\n};\n\n"]}